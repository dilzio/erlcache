%% Copyright
-module(custom_error_report).
-author("dilzio").

-behaviour(gen_event).

%% API
-export([register_with_logger/0]).

%% gen_event
-export([init/1, handle_event/2, handle_call/2, handle_info/2, terminate/2,
  code_change/3]).

-record(state, {}).

%% API
register_with_logger()->
  error_logger:add_report_handler(?MODULE).

%% gen_event callbacks
init(_Args) ->
  {ok, #state{}}.

%% generated by error_msg() call
handle_event({error, _Gleader, {Pid,Format,Data}}, State) ->
  io:fwrite("Custom error_msg() output Pid:<~p> Format:~s Data:~s ~n", [Pid, Format, Data]),
  {ok, State};

%% generated by error_report()/1 call
handle_event({error_report, _Gleader, {Pid,std_error,Report}}, State) ->
  io:fwrite("Custom error_report()/1 output Pid:<~p> Report:~p~n", [Pid, Report]),
  {ok, State};

%% generated by error_report()/2 call
handle_event({error_report, _Gleader, {Pid,Type,Report}}, State) ->
  io:fwrite("Custom error_report()/2 output Pid:<~p> Type:<~p> Report:~p~n", [Pid, Type, Report]),
  {ok, State};

%% generated by warning_msg() call
handle_event({warning_msg, _Gleader, {Pid,Format,Data}}, State) ->
  io:fwrite("Custom warning_msg() output Pid:<~p> Format:~s Data:~s ~n", [Pid, Format, Data]),
  {ok, State};

%% generated by warning_report()/1 call
handle_event({warning_report, _Gleader, {Pid,std_warning,Report}}, State) ->
  io:fwrite("Custom warning_report()/1 output Pid:<~p> Report:~p~n", [Pid, Report]),
  {ok, State};

%% generated by warning_report()/2 call
handle_event({warning_report, _Gleader, {Pid,Type,Report}}, State) ->
  io:fwrite("Custom warning_report()/2 output Pid:<~p> Type:<~p> Report:~p~n", [Pid, Type, Report]),
  {ok, State};

%% generated by info_msg() call
handle_event({info_msg, _Gleader, {Pid,Format,Data}}, State) ->
  io:fwrite("Custom info_msg() output Pid:<~p> Format:~s Data:~s ~n", [Pid, Format, Data]),
  {ok, State};

%% generated by info_report()/1 call
handle_event({info_report, _Gleader, {Pid,std_info,Report}}, State) ->
  io:fwrite("Custom info_report()/1 output Pid:<~p> Report:~p~n", [Pid, Report]),
  {ok, State};

%% generated by info_report()/2 call
handle_event({info_report, _Gleader, {Pid,system_info,Report}}, State) ->
  io:fwrite("System Info Report: output Pid:<~p> Report:~p~n", [Pid, Report]),
  {ok, State};

%% generated by info_report()/2 call
handle_event({info_report, _Gleader, {Pid,biz_info,Report}}, State) ->
  io:fwrite("Biz Info Report: output Pid:<~p> Report:~p~n", [Pid, Report]),
  {ok, State};

%% generated by info_report()/2 call
handle_event({info_report, _Gleader, {Pid,mtc_info,Report}}, State) ->
  io:fwrite("MTC Info Report: output Pid:<~p> Report:~p~n", [Pid, Report]),
  {ok, State};

%% generated by info_report()/2 call
handle_event({info_report, _Gleader, {Pid,Type,Report}}, State) ->
  io:fwrite("Custom info_report()/2 output Pid:<~p> Type:<~p> Report:~p~n", [Pid, Type, Report]),
  {ok, State}.

handle_call(_Request, State) ->
  {ok, ok, State}.

handle_info(_Info, State) ->
  {ok, State}.

terminate(_Arg, _State) ->
  ok.

code_change(_OldVsn, State, _Extra) ->
  {ok, State}.
